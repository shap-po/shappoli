plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

def ENV = System.getenv()

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenLocal()
    mavenCentral()
    exclusiveContent {

        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }

        filter {
            includeGroup "maven.modrinth"
        }

    }
    maven {
        name = "QuiltMC"
        url = "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = 'Ladysnake Mods (snapshots)'
        url = 'https://maven.ladysnake.org/snapshots'
    }
    maven {
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        url "https://masa.dy.fi/maven"
    }
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        url "https://maven.terraformersmc.com/"
    }
}

loom {
    mods {
        register("shappoli") {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.test)
        }
    }
    runs {
        client {
            client()
            source(sourceSets.test)
            setConfigName("Minecraft Client")
        }
        server {
            server()
            source(sourceSets.test)
            setConfigName("Minecraft Server")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "io.github.apace100:apoli:${project.apoli_version}"

    // Optional dependencies
    modCompileOnly("io.github.apace100:origins-fabric:${project.origins_version}") {
        transitive = false
    }
    modCompileOnly("dev.emi:trinkets:${project.trinkets_version}") {
        transitive = false
    }
    modCompileOnly("maven.modrinth:female-gender:${project.wildfire_gender_version}") {
        transitive = false
    }
    modCompileOnly("maven.modrinth:woodwalkers:${project.woodwalkers_version}")
    modCompileOnly("maven.modrinth:crafted-core:${project.crafted_core_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// modrinth configuration
modrinth {
    token = ENV.MODRINTH_TOKEN
    projectId = project.archives_base_name
    uploadFile = remapJar
    changelog = ""
    dependencies {
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api"
        required.project "origins"

        optional.project "trinkets"
        optional.project "woodwalkers"
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        mavenLocal()
    }
}
